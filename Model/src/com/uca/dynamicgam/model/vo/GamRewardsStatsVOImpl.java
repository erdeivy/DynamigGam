package com.uca.dynamicgam.model.vo;

import com.uca.dynamicgam.model.beans.RewardMessage;

import com.uca.dynamicgam.model.vo.common.GamRewardsStatsVO;

import java.util.ArrayList;
import java.util.List;

import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sat May 27 10:34:16 CEST 2017
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class GamRewardsStatsVOImpl extends ViewObjectImpl implements GamRewardsStatsVO {
    /**
     * This is the default constructor (do not remove).
     */
    public GamRewardsStatsVOImpl() {
    }

    /**
     * Returns the variable value for bind_currentUser.
     * @return variable value for bind_currentUser
     */
    public String getbind_currentUser() {
        return (String) ensureVariableManager().getVariableValue("bind_currentUser");
    }

    /**
     * Sets <code>value</code> for variable bind_currentUser.
     * @param value value to bind as bind_currentUser
     */
    public void setbind_currentUser(String value) {
        ensureVariableManager().setVariableValue("bind_currentUser", value);
    }

    public List getNewRewards() {
        List<RewardMessage> rewardsList = new ArrayList<RewardMessage>();
        this.executeQuery();
        RowSetIterator createRowSetIterator = this.createRowSetIterator(null);
        boolean changed = false;
        while (createRowSetIterator.hasNext()) {
            GamRewardsStatsVORowImpl next = (GamRewardsStatsVORowImpl) createRowSetIterator.next();
            RewardMessage reward = convertRow(next);
            int index = indexOf(rewardsList, reward);
            if (index > -1) {
                //Reward is already in the list
                if ("Y".equals(next.getQuantifiable())) {
                    //If its quantifiable, we increase the qty, in other case (not quantifiable), don't do anything
                    Integer newQty = rewardsList.get(index).getQty().intValue() + 1;
                    rewardsList.get(index).setQty(newQty);
                }
            } else {
                // Reward not in the list
                rewardsList.add(reward);
            }

            //Now mark the reward as shown
            next.setShown("Y");
            changed = true;
        }
        createRowSetIterator.closeRowSetIterator();

        if (changed) {
            this.getDBTransaction().commit();
        }

        return rewardsList;
    }

    private RewardMessage convertRow(GamRewardsStatsVORowImpl row) {
        return new RewardMessage(row.getIdReward(), row.getRewardName(), row.getDescription(), new Integer(1),
                                 row.getImage());
    }

    private int indexOf(List<RewardMessage> rewardsList, RewardMessage reward) {
        int index = -1;
        if (rewardsList != null && reward != null) {
            for (int i = 0; index == -1 && i < rewardsList.size(); i++) {
                if (rewardsList.get(i).getIdReward().equals(reward.getIdReward())) {
                    index = i;
                }
            }
        }
        return index;
    }
}
