package com.uca.dynamicgam.model.vo;

import com.uca.dynamicgam.model.beans.TableRow;

import com.uca.dynamicgam.model.vo.base.DynamicGamBaseVOImpl;
import com.uca.dynamicgam.model.vo.common.GamTablesVO;

import java.util.ArrayList;
import java.util.List;

import oracle.jbo.Row;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sun Nov 06 14:14:57 CET 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class GamTablesVOImpl extends DynamicGamBaseVOImpl implements GamTablesVO {
    /**
     * This is the default constructor (do not remove).
     */
    public GamTablesVOImpl() {
    }

    /**
     * Returns the variable value for bind_table.
     * @return variable value for bind_table
     */
    public String getbind_table() {
        return (String) ensureVariableManager().getVariableValue("bind_table");
    }

    /**
     * Sets <code>value</code> for variable bind_table.
     * @param value value to bind as bind_table
     */
    public void setbind_table(String value) {
        ensureVariableManager().setVariableValue("bind_table", value);
    }

    /**
     * Returns the variable value for bind_schema.
     * @return variable value for bind_schema
     */
    public String getbind_schema() {
        return (String) ensureVariableManager().getVariableValue("bind_schema");
    }

    /**
     * Sets <code>value</code> for variable bind_schema.
     * @param value value to bind as bind_schema
     */
    public void setbind_schema(String value) {
        ensureVariableManager().setVariableValue("bind_schema", value);
    }

    public List<TableRow> buildTableContent() {
        List<TableRow> contenido = new ArrayList<TableRow>();
        GamTablesVORowImpl tabla = (GamTablesVORowImpl) this.first();
        //TODO usar iterator
        if (tabla != null) {
            setCurrentRow(tabla);
            Row[] filas = tabla.getGamRows().getAllRowsInRange();
            for (Row row : filas) {
                GamRowsVORowImpl fila = (GamRowsVORowImpl) row;
                TableRow newFila = new TableRow();
                Row[] celdas = fila.getGamCell().getAllRowsInRange();

                for (Row celdaToCast : celdas) {
                    GamCellVORowImpl celda = (GamCellVORowImpl) celdaToCast;
                    newFila.set(celda.getColumnName(), celda.getCellValue());
                }
                newFila.set("RowKey", fila.getRowKey());

                contenido.add(newFila);
            }
        }

        return contenido;
    }
    
    public void queryTableAndColumns(String schema, String table)
    {
      setbind_schema(schema);
      setbind_table(table);
      executeQuery();
      System.out.println("queryTableAndColumns");
      System.out.println("tableAmount: " + getEstimatedRowCount());
      
      GamTablesVORowImpl row = (GamTablesVORowImpl) first();
      if(row != null){
        setCurrentRow(row);
        System.out.println("columnsAmount: " + row.getGamColumns().getRowCount());
      }
    }
}